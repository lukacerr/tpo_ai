generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("API_DB_URL")
}

enum UnitCondition {
  AVAILABLE
  RENTED
  OWNED
}

model Unit {
  id         Int           @id @default(autoincrement())
  Building   Building      @relation(fields: [buildingId], references: [id])
  buildingId Int
  User       User?         @relation(fields: [userId], references: [id])
  userId     Int?
  condition  UnitCondition
  code       String
  claims     Claim[]
}

model Amenity {
  id          Int      @id @default(autoincrement())
  Building    Building @relation(fields: [buildingId], references: [id])
  buildingId  Int
  name        String
  description String?
  floor       Int?
  claims      Claim[]
}

model Building {
  id        Int       @id @default(autoincrement())
  address   String    @unique
  units     Unit[]
  amenities Amenity[]
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  name     String?
  isAdmin  Boolean @default(false)
  claims   Claim[]
  units    Unit[]
}

enum ClaimStatus {
  OPEN
  IN_PROGRESS
  DISMISSED
  ANNULLED
  CLOSED
}

model Claim {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  claimStatus ClaimStatus
  description String
  unit        Unit?       @relation(fields: [unitId], references: [id])
  unitId      Int?
  amenity     Amenity?    @relation(fields: [amenityId], references: [id])
  amenityId   Int?
  // TODO: images
}
