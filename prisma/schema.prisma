generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("API_DB_URL")
}

model Unit {
  id         Int            @id @default(autoincrement())
  Building   Building       @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId Int
  users      UsersOnUnits[]
  code       String
  claims     Claim[]
}

enum UnitUserCondition {
  RENTED
  OWNED
}

model UsersOnUnits {
  Unit       Unit              @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId     Int
  User       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  condition  UnitUserCondition
  assignedAt DateTime          @default(now())

  @@id([unitId, userId])
}

model Amenity {
  id          Int      @id @default(autoincrement())
  Building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId  Int
  name        String
  description String?
  floor       String?
  claims      Claim[]
}

model Building {
  id        Int       @id @default(autoincrement())
  address   String    @unique
  units     Unit[]
  amenities Amenity[]
}

model User {
  id       Int            @id @default(autoincrement())
  username String         @unique
  password String
  name     String?
  isAdmin  Boolean        @default(false)
  claims   Claim[]
  units    UsersOnUnits[]
}

enum ClaimStatus {
  OPEN
  IN_PROGRESS
  DISMISSED
  ANNULLED
  CLOSED
}

model Claim {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  claimStatus ClaimStatus
  lastMessage String?
  description String
  unit        Unit?       @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId      Int?
  amenity     Amenity?    @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId   Int?
  multimedia  String[]
}
